(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{437:function(t,s,a){t.exports=a.p+"assets/img/error1.6b23ea87.png"},438:function(t,s,a){t.exports=a.p+"assets/img/error2.808d15cc.png"},493:function(t,s,a){"use strict";a.r(s);var e=a(33),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git-分布式版本控制系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-分布式版本控制系统"}},[t._v("#")]),t._v(" Git | 分布式版本控制系统")]),t._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("blockquote",[e("p",[t._v("Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。")])]),t._v(" "),e("p",[t._v("文档："),e("a",{attrs:{href:"https://git-scm.com/book/en/v2",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://git-scm.com/book/en/v2"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"忽略文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#忽略文件"}},[t._v("#")]),t._v(" 忽略文件")]),t._v(" "),e("p",[t._v("一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件的模式。 来看一个实际的 .gitignore 例子：")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" .gitignore\n*."),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("oa"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n*~\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。 第二行告诉 Git 忽略所有名字以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。 此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。 要养成一开始就为你的新仓库设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。")]),t._v(" "),e("p",[t._v("文件 .gitignore 的格式规范如下：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("所有空行或者以 # 开头的行都会被 Git 忽略。")])]),t._v(" "),e("li",[e("p",[t._v("可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。")])]),t._v(" "),e("li",[e("p",[t._v("匹配模式可以以（/）开头防止递归。")])]),t._v(" "),e("li",[e("p",[t._v("匹配模式可以以（/）结尾指定目录。")])]),t._v(" "),e("li",[e("p",[t._v("要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。")])])]),t._v(" "),e("p",[t._v("所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。 星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符 （这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）； 问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。 使用两个星号（**）表示匹配任意中间目录，比如 a/**/z 可以匹配 a/z 、 a/b/z 或 a/b/c/z 等。")]),t._v(" "),e("p",[t._v("我们再看一个 .gitignore 文件的例子：")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略所有的 .a 文件")]),t._v("\n*.a\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("lib.a\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO")]),t._v("\n/TODO\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略任何目录下名为 build 的文件夹")]),t._v("\nbuild/\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt")]),t._v("\ndoc/*.txt\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件")]),t._v("\ndoc/**/*.pdf\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br")])]),e("blockquote",[e("p",[t._v("Tip: GitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表， 你可以在 "),e("a",{attrs:{href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/github/gitignore"),e("OutboundLink")],1),t._v(" 找到它。")])]),t._v(" "),e("h2",{attrs:{id:"撤销操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤销操作"}},[t._v("#")]),t._v(" 撤销操作")]),t._v(" "),e("ol",[e("li",[t._v("用新提交抵消之前的操作。—— 产生新提交。")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("一种常见的场景是，提交代码以后，你突然意识到这个提交有问题，应该撤销掉，这时执行"),e("code",[t._v("git revert HEAD")]),t._v("命令就可以了。")])]),t._v(" "),e("li",[e("p",[t._v("上面命令的原理是，在当前提交后面，新增一次提交，抵消掉上一次提交导致的所有变化。它不会改变过去的历史，所以是首选方式，没有任何丢失代码的风险。(因为公司内部需要漂亮的 commit 列表所以这种方式不行的。)")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git revert")]),t._v(" 命令只能抵消上一个提交，如果想抵消多个提交，必须在命令行依次指定这些提交。比如，抵消前两个提交，要像下面这样写。"),e("code",[t._v("git revert [倒数第一个提交] [倒数第二个提交]")])])]),t._v(" "),e("li",[e("p",[t._v("git revert命令还有两个参数。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("--no-edit：执行时不打开默认编辑器，直接使用 Git 自动生成的提交信息。\n--no-commit：只抵消暂存区和工作区的文件变化，不产生新的提交。\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])])])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("丢弃提交")])]),t._v(" "),e("ul",[e("li",[t._v("如果希望以前的提交在历史中彻底消失，而不是被抵消掉，可以使用git reset命令，丢弃掉某个提交之后的所有提交。(常用！！保证自己的改动只有一个 commit)")]),t._v(" "),e("li",[e("code",[t._v("git reset [last good SHA]")])]),t._v(" "),e("li",[t._v("git reset 的原理是，让最新提交的指针回到以前某个时点，该时点之后的提交都从历史中消失。默认情况下，git reset不改变工作区的文件（但会改变暂存区），--hard参数可以让工作区里面的文件也回到以前的状态。")]),t._v(" "),e("li",[t._v("执行git reset命令之后，如果想找回那些丢弃掉的提交，可以使用git reflog命令，具体做法参考"),e("a",{attrs:{href:"https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/#redo-after-undo-local",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),e("OutboundLink")],1),t._v("。不过，这种做法有时效性，时间长了可能找不回来。")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("修改上一次提交")])]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("git commit --amend")])])]),t._v(" "),e("li",[e("p",[t._v("这个命令会将暂存区中的文件提交。 如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令）， 那么快照会保持不变，而你所修改的只是提交信息。")])]),t._v(" "),e("li",[e("p",[t._v("修补提交最明显的价值是可以稍微改进你最后的提交，而不会让“啊，忘了添加一个文件”或者 “小修补，修正笔误”这种提交信息弄乱你的仓库历史。")]),t._v(" "),e("blockquote",[e("p",[t._v("Tip: 记住，在 Git 中任何 已提交 的东西几乎总是可以恢复的。 甚至那些被删除的分支中的提交或使用 --amend 选项覆盖的提交也可以恢复 （阅读 "),e("a",{attrs:{href:"https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-%E7%BB%B4%E6%8A%A4%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D#_data_recovery",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据恢复"),e("OutboundLink")],1),t._v(" 了解数据恢复）。 然而，任何你未提交的东西丢失后很可能再也找不到了。")])])])]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("撤销工作区文件修改")])]),t._v(" "),e("ul",[e("li",[t._v("如果工作区的某个文件被改乱了，但还没有提交，可以用"),e("code",[t._v("git checkout")]),t._v("命令找回本次修改之前的文件。")]),t._v(" "),e("li",[t._v("它的原理是先找暂存区，如果该文件有暂存的版本，则恢复该版本，否则恢复上一次提交的版本。注意，工作区的文件变化一旦被撤销，就无法找回了。")])]),t._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[t._v("从暂存区撤销文件")])]),t._v(" "),e("ul",[e("li",[t._v("如果不小心把一个文件添加到暂存区，可以用下面的命令撤销。"),e("code",[t._v("git rm --cached [filename]")]),t._v("不影响已经提交的内容。")])]),t._v(" "),e("ol",{attrs:{start:"6"}},[e("li",[t._v("撤销当前分支的变化")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("你在当前分支上做了几次提交，突然发现放错了分支，这几个提交本应该放到另一个分支。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 新建一个 feature 分支，指向当前最新的提交\n# 注意，这时依然停留在当前分支\n$ git branch feature\n\n# 切换到这几次提交之前的状态\n$ git reset --hard [当前分支此前的最后一次提交]\n\n# 切换到 feature 分支\n$ git checkout feature\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br")])])]),t._v(" "),e("li",[e("p",[t._v("上面的操作等于是撤销当前分支的变化，将这些变化放到一个新建的分支。")])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1582800",target:"_blank",rel:"noopener noreferrer"}},[t._v("回滚"),e("OutboundLink")],1)])])]),t._v(" "),e("h2",{attrs:{id:"贮藏"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#贮藏"}},[t._v("#")]),t._v(" 贮藏")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("要查看贮藏的东西，可以使用 git stash list。想要应用其中一个更旧的贮藏，可以通过名字指定它，像这样：git stash apply stash@{2}")]),t._v(" "),e("ul",[e("li",[t._v("从贮藏创建一个分支")])]),t._v(" "),e("p",[t._v("如果贮藏了一些工作，将它留在那儿了一会儿，然后继续在贮藏的分支上工作，在重新应用工作时可能会有问题。 如果应用尝试修改刚刚修改的文件，你会得到一个合并冲突并不得不解决它。 如果想要一个轻松的方式来再次测试贮藏的改动，可以运行 "),e("code",[t._v("git stash branch <new branchname>")]),t._v(" 以你指定的分支名创建一个新分支，检出贮藏工作时所在的提交，重新在那应用工作，然后在应用成功后丢弃贮藏：")]),t._v(" "),e("h2",{attrs:{id:"删除分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[t._v("#")]),t._v(" 删除分支")]),t._v(" "),e("h3",{attrs:{id:"删除本地分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除本地分支"}},[t._v("#")]),t._v(" 删除本地分支")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -d 是一个标志，是命令的一个选项，它是 --delete ")]),t._v("\ngit branch "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("d local_branch_name \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 列出所有本地分支")]),t._v("\ngit branch\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("无法删除所在的分支，会报以下的错误：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(437),alt:""}})]),t._v(" "),e("p",[t._v("因此，在删除本地分支之前，请确保使用以下git checkout命令切换到您不想删除的另一个分支。")]),t._v(" "),e("p",[t._v("我们刚刚使用的删除本地分支的命令并非在所有情况下都有效。如果分支包含未合并的更改和未推送的提交，则该-d 标志将不允许删除本地分支。这是因为任何其他分支都看不到提交，并且 Git 正在保护您免于意外丢失任何提交数据。如果你尝试这样做，Git 会显示一个错误：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(438),alt:""}})]),t._v(" "),e("p",[t._v("正如错误所暗示的那样，您需要改用该 -D 标志："),e("code",[t._v("git branch -D local_branch_name")])]),t._v(" "),e("p",[t._v("-D带有大写-- delete --force字母D的标志会强行删除本地分支，无论其合并状态如何。但请注意，您应该谨慎使用此命令，因为没有提示要求您确认您的操作。仅当您绝对确定要删除本地分支时才使用它。如果您没有将其合并到另一个本地分支或将其推送到代码库中的远程分支，您将面临丢失所做的任何更改的风险。")]),t._v(" "),e("h3",{attrs:{id:"修改远程分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改远程分支"}},[t._v("#")]),t._v(" 修改远程分支")]),t._v(" "),e("p",[t._v("远程分支与本地分支是分开的。删除远程分支的命令是："),e("code",[t._v("git push remote_name -d remote_branch_name")])]),t._v(" "),e("p",[e("code",[t._v("git branch -a")]),t._v("显示所有分支机构 - 本地和远程。我想删除远程 origin/test 分支，所以我使用命令："),e("code",[t._v("git push origin -d test")])]),t._v(" "),e("h2",{attrs:{id:"解决冲突"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决冲突"}},[t._v("#")]),t._v(" 解决冲突")]),t._v(" "),e("p",[t._v("通常情况下需要 "),e("code",[t._v("git fetch + git rebase")]),t._v(" 解决！合并代码后，重新 "),e("code",[t._v("git add")]),t._v(" 然后 "),e("code",[t._v("git rebase --continue")]),t._v("相当于 --amend 修改上一次的 commit 。")])])}),[],!1,null,null,null);s.default=n.exports}}]);